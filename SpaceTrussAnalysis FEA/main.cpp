/*********************************************
Planar Truss Analysis Program
Copyright(c) 2000-22, S. D. Rajan
All rights reserved

Intermediate Structural Analysis and Design and
Object-Oriented Numerical Analysis via C++

List of improvements made:

*********************************************/
#include "truss.h"
#include "clockEXH.h"

int main (int argc, char* argv[])
{
    // CArrayBase class is used to track memory allocation, deallocation
    // and route the error messages from the CVector and CMatrix classes
    CArrayBase AB;
    {
        CTruss MyTruss; // the one and only truss
        try
        {
            // show program banner
            MyTruss.Banner (std::cout);

            // open input and output files
            MyTruss.PrepareIO (argc, argv);

            // start the timer --------------------------------------------------------
            CClock Timer;
            std::string strDateTime;
            Timer.GetDateTime (strDateTime);
            std::cout << "\nStarting out at : " << strDateTime << "\n";

            // read truss model
            MyTruss.ReadTrussModel ();

            // analyze
            MyTruss.Analyze ();

            // end the timer --------------------------------------------------------
            // get the current date and time
            Timer.GetDateTime (strDateTime);
            std::cout << "\n      Ending at : " << strDateTime << "\n";
            // compute the elapsed time -----------------------------------------------
            std::cout << "Elapsed wall clock time: " << Timer.DiffTime ()
                      << " seconds\n";
        }

        // --------------------
        // trap all errors here
        // --------------------
        // errors trapped by the truss program
        catch (CLocalErrorHandler::ERRORCODE &err)
        {
            MyTruss.DisplayErrorMessage (err);
        }

        // errors trapped by the library functions
        catch (CGlobalErrorHandler::ERRORCODE &err)
        {
            CGlobalErrorHandler::ErrorHandler (err);
        }

        // errors trapped in the CVector/CMatrix classes
        catch (CArrayBase::ERRORVM &err)
        {
            CGlobalErrorHandler::ErrorHandler (err);
        }

        // errors trapped by C++ 
        catch (std::exception &err)
        {
            CGlobalErrorHandler::ErrorHandler (err);
        }

        // forgotten to handle a trapped error?
        catch (...)
        {
            std::cout << "Sorry, could not catch the error whatever it is.\n";
        }

        // close input and output files
        MyTruss.TerminateProgram ();
    }

    // show statistics generated by CVector/CMatrix classes
    AB.ShowStatistics (std::cout);

	return 0;
}